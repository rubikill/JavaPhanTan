<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">



	<!-- This is where we configure Spring-Security -->
	<security:http auto-config="true" use-expressions="true"
		access-denied-page="/admin/denied">

		<security:form-login login-page="/admin/login"
			authentication-failure-url="/admin/login?error=true"
			default-target-url="/admin" />

		<security:logout invalidate-session="true"
			logout-success-url="/admin/login" logout-url="/admin/logout" />

	</security:http>

	<!--=================== Security from database ================ -->
	<beans:bean
		class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />

	<!-- Factory bean that creates the Mongo instance -->
	<beans:bean id="mongo"
		class="org.springframework.data.mongodb.core.MongoFactoryBean">
		<beans:property name="host" value="localhost" />
	</beans:bean>
	<beans:bean id="initBean" class="co.hcmus.app.Initialization" />
	<context:annotation-config />
	<!-- MongoTemplate for connecting and quering the documents in the database -->
	<beans:bean id="mongoTemplate"
		class="org.springframework.data.mongodb.core.MongoTemplate">
		<beans:constructor-arg name="mongo" ref="mongo" />
		<beans:constructor-arg name="databaseName"
			value="shop" />
	</beans:bean>

	<!-- Use this post processor to translate any MongoExceptions thrown in 
		@Repository annotated classes -->
	<beans:bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<context:annotation-config />
	<context:component-scan base-package="co.hcmus" />

	<beans:bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userDetailsService" />
	</beans:bean>

	<beans:bean id="authenticationManager"
		class="org.springframework.security.authentication.ProviderManager">
		<beans:property name="providers">
			<beans:list>
				<beans:ref local="daoAuthenticationProvider" />
			</beans:list>
		</beans:property>
	</beans:bean>
	<security:authentication-manager>
		<security:authentication-provider
			user-service-ref="userDetailsService">
			<security:password-encoder hash="md5" />
		</security:authentication-provider>
	</security:authentication-manager>
	<!--======================= Security from database =====================-->
	

	<!--security:authentication-manager> <security:authentication-provider user-service-ref="userDetailsService"> 
		<security:password-encoder ref="passwordEncoder" /> </security:authentication-provider> 
		</security:authentication-manager> <beans:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" 
		id="passwordEncoder" / -->

	<!-- An in-memory list of users. No need to access an external database 
		layer. See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
	<!-- john's password is admin, while jane;s password is user -->
	<!--security:user-service id="userDetailsService"> <security:user name="john" 
		password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_ADMIN" /> <security:user 
		name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_NORMAL" 
		/> </security:user-service -->

</beans:beans>